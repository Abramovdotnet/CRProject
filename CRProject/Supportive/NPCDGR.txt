# Comprehensive Rules for Generating Unique NPC Dialogue JSON

## File Structure & Naming
1. **File Naming Convention**:
   - Name the JSON file `Dialogue{NPC_ID}.json`
   - Store in `CRProject/Resources/UniqueDialogues/RelationGroup{number}` folder
   - Alternatively (for general use): `CRProject/Resources/UniqueDialogues/RelationGroup{number}`

2. **Root Structure**:
   - Check CRProject/Resources/UniqueDialogues/RelationGroup1/Dialogue6248.json for better understanding dialogues structure
   - Check CRProject/Systems/DialogueProcessor.swift & CRProject/Systems/DialogueSystem.swift additionaly

3. **Node ID Convention**:
   - Use `{NPC_ID}_{node_purpose}` where practical
   - Reserved `"end"` ID to terminate dialogue branches

## Character Foundation
4. **Bio-Based Dialogue**:
   - ALL dialogue text, options, tone, motivations, and paths must directly reflect the NPC's Bio
   - Dialogue should explore and expand upon the bio's established character
   _ Bio could be retrieved from 'CRProject/Data/NPCs.json' by {NPC_ID}

## Initial Node Requirements
5. **Initial Node (`initialNode`)**:
   - Must point to a `{NPC_ID}_greeting` node
   - Implement conditional greeting:
     ```json
     "{if:first_meeting} [First meeting text] {else} [Subsequent meeting text{endif}"
     ```
   - Greeting must immediately establish NPC's core role/personality
   - Initial options should provide broad entry points relevant to bio/role:
     - Learn about them
     - Ask about their work/service
     - Investigate
     - Other bio-relevant topics

## Node Structure
6. **Node Components**:
   - Required:
     - `text`: NPC dialogue consistent with bio's voice/personality
     - `options`: Array of player choices
   - Optional:
     - `requirements`: Conditions to reach the node (use sparingly)

## Option Structure
7. **Option Components**:
   - Required:
     - `text`: Clear, concise player choice (include `(Cost)` or `[Action Hint]` if relevant)
     - `type`: Effect type (must match system capabilities):
       - `normal`: Standard dialogue
       - `relationshipIncrease`: Improves relationship
       - `relationshipDecrease`: Worsens relationship
       - `loveForSail`: Special service option
       - Other system-supported types (check CRProject/Systems/DialogueOptionType.swift)
     - `nextNode`: Transition target (`"end"` or node ID)
   - Optional:
     - `requirements`: Conditions to select option:
       - `minRelationship`: Minimum relationship level
       - `maxRelationship`: Maximum relationship level
       - `coins`: Required currency
       - `isNight`: Time condition
       - `isIndoor`: Location condition
       - Other system-supported conditions

## Dialogue Flow Design
8. **Branching & Progression**:
   - Create meaningful branches based on choices and requirements
   - Develop distinct thematic paths relevant to bio:
     - Personal history
     - Professional services
     - Secrets
     - Relationships
   - Relationship progression:
     - Use `relationshipIncrease` for respectful/understanding/supportive choices
     - Use `relationshipDecrease` for rude/dismissive/inappropriate choices
     - Gate deeper conversations with `minRelationship`
     - Include recovery paths after negative changes
   - Incorporate loops for exploration/second chances
   - Ensure all branches lead to `"end"` or loop

9. **Relationship Stages**:
   - Plan progression in stages (e.g., 1-5):
     1. Initial meeting (basic information)
     2. Personal details/opinions
     3. Deeper conversations/trust building
     4. Personal favors/special services
     5. Deepest secrets/strongest bonds
   - Include milestone nodes:
     - `{NPC_ID}_greeting_return`: Post-establishment greeting
     - `{NPC_ID}_catchup`: Updates on past conversations
     - `{NPC_ID}_trust`: High-relationship dialogue
   - Balance relationship changes:
     - Offer both positive/negative options
     - Make changes logical per personality
     - Include recovery paths

## Game Integration
10. **Mechanics Integration**:
    - Use `requirements` to link to gameplay systems
    - Implement `loveForSail` with appropriate costs
    - Use `investigate` for information gathering
    - Include conditional text with `{if:condition}` syntax

## World Building
11. **Interconnected NPCs**:
    - Select 1-2 existing NPCs as references (from same RelationGroup)
    - Analyze potential relationships based on:
      - Shared locations
      - Professions
      - Contrasting personalities
      - Potential opinions
    - Incorporate subtle mentions/opinions/references
    - Ensure consistency with:
      - Target NPC's character
      - Reference NPC's established bio/dialogue
    - Avoid major plot reveals - focus on flavor/context
    - Update related NPC dialogues to maintain consistency

## Stateful Interactions
12. **Dynamic Dialogue**:
    - Plan for relationship progression via `minRelationship` gates
    - Include special nodes for subsequent visits:
      - `{NPC_ID}_greeting_return`
      - `{NPC_ID}_catchup`
    - Offer different dialogue after relationship thresholds

## Best Practices
- Maintain consistent voice/personality throughout
- Ensure logical flow between dialogue branches
- Balance relationship change opportunities
- Use requirements judiciously
- Test all paths terminate properly
- Verify world interconnectivity maintains consistency
