1. Концепция боевой системы
Бой — это не просто обмен ударами, а часть социального и сюжетного взаимодействия.
Ваша игра — про скрытность, отношения, манипуляции и последствия. Поэтому бой должен быть:
редким, но напряжённым событием;
тесно связанным с социальным статусом, профессией, отношениями и окружением;
с акцентом на тактику, а не на экшен.
2. Архитектурные рекомендации
2.1. Модульность и интеграция
CombatService: создать отдельный сервис для управления боями (по аналогии с существующими сервисами).
CombatState: отдельная модель состояния боя (участники, инициатор, тип конфликта, фазы, результат).
Интеграция с GameStateService и NPCInteractionService: бой может инициироваться как игроком, так и NPC, а также быть следствием социальных событий (например, разоблачение, ссора, защита).
2.2. Расширяемость
Все параметры боя (шанс успеха, урон, последствия) вынести в конфиг-файлы (JSON), чтобы дизайнеры могли их настраивать без правки кода.
Возможность добавлять новые типы боёв: дуэль, засада, групповая драка, арест, магическая схватка.
2.3. Использование существующих сущностей
Player/NPC: использовать их параметры (кровь, профессия, мораль, отношения, предметы) для расчёта исхода боя.
Scene/SceneType: учитывать тип локации (например, в храме нельзя драться, на площади — много свидетелей).
Активности NPC: бой может прерывать или изменять активность NPC.
3. Геймдизайн и механика
3.1. Инициирование боя
Игрок может начать бой с NPC (через UI или диалог).
NPC могут нападать на игрока (если раскрыта сущность, при низких отношениях, по квесту).
Вмешательство других NPC возможно (стража, союзники, свидетели).
3.2. Фазы боя
Подготовка: анализируются параметры сторон (кровь, предметы, мораль, профессия, отношения, окружение).
Выбор действия: атаковать, защищаться, использовать предмет, попытаться сбежать, применить вампирскую способность.
Результат: расчёт исхода (система вероятностей, модификаторы от профессии, статусов, предметов).
Последствия: изменение здоровья/крови, статусов (арест, ранения, смерть), изменение отношений, возможное начало расследования.
3.3. UI и визуализация
Минималистичный, но атмосферный интерфейс боя: затемнение фона, крупные портреты, лаконичные кнопки действий.
Анимации: вспышки, кровь, эффекты страха/интриги, визуальные подсказки исхода.
Интеграция с основным UI: бой — это модальное окно поверх основной сцены.
4. Взаимодействие с остальной системой
После боя автоматически обновлять отношения, мораль, статус NPC и игрока.
В случае смерти NPC — запускать цепочку последствий (расследование, слухи, изменение поведения других NPC).
Возможность скрыть следы боя (если игрок — вампир, может "замести следы" при определённых условиях).
5. Пример сценария боя
Игрок решает напасть на NPC (или наоборот).
Открывается модальное окно боя.
Игрок выбирает действие: атаковать, использовать способность, сбежать, запугать.
Система рассчитывает исход (с учётом профессии, крови, предметов, отношений, окружения).
Показывается результат: урон, статус, последствия.
После боя — обновление мира: NPC могут звать стражу, игрок может быть арестован, свидетели могут распространить слухи.
6. Художественные рекомендации
Визуальный стиль боя — готический, с акцентом на светотень, кровь, мистику.
Эффекты: дымка, вспышки, красные акценты, анимации страха и боли.
UI — лаконичный, с крупными иконками, минималистичными кнопками, атмосферными шрифтами.
7. Следующие шаги
Создать CombatService и CombatState.
Прототипировать UI боя (модальное окно поверх MainSceneView).
Реализовать базовую механику боя между игроком и NPC.
Провести внутренний плейтест, собрать обратную связь.
Доработать механику с учётом отзывов и интегрировать с остальными системами (NPC, квесты, расследования).